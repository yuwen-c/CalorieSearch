{"version":3,"sources":["component/Card.js","component/CardList.js","component/Search.js","component/Button.js","component/Viewport.js","component/Boundary.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","shrt_desc","energ_kcal","className","CardList","foodP","map","food","key","ndb_no","Search","onChangeP","onKeyDownP","type","placeholder","name","onChange","onKeyUp","Button","onClickP","value","onClick","Viewport","propV","children","Boundary","props","state","hasError","error","errorInfo","console","log","this","setState","Component","App","keyInFood","event","SearchField","target","funFetch","foodWanted","fetch","then","response","json","result","foods","catch","err","btnSearchFood","enterSearchFood","keyCode","length","comparedFoods","filter","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1141f7d8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({shrt_desc, energ_kcal}) => {\n    //const {shrt_desc, energ_kcal}=foodP;\n    return(\n\n\t\t<div className = 'tc bg-lightest-blue dib br3 pa3 ma2 grow ba shadow-5 hidden'>\n\t\t \t<article className=\"center mw5 mw6-ns hidden ba mv4\">\n\t\t\t\t<h2 className = 'f4 bg-silver mv0 pv2 ph3'>{shrt_desc}</h2>\n\t\t\t\t<div>\n\t\t\t\t\t<p>{energ_kcal} Kcal/ 100g</p>\n\t\t\t\t</div>\n\t\t\t</article>\t\n\t\t</div>\n    )\n}\n\nexport default Card;\n\n\n","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({foodP}) =>{\n    // if(true){  //error test\n    //     throw new Error('error test');\n    // }\n    return(\n        <div>\n            {\n            foodP.map(food => {     \n                return (            \n                    <Card \n                    key={food.ndb_no}\n                    shrt_desc={food.shrt_desc} \n                    energ_kcal={food.energ_kcal}\n                    />\n                )\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Search = ({onChangeP, onKeyDownP}) => {\n    return(\n        <div className='pb3 tc'>\n            <input \n            className='pa2' \n            type='text' \n            placeholder='Search food' \n            name='food'\n            onChange={onChangeP}\n            onKeyUp={onKeyDownP}/>\n        </div>\n    )\n}\n\nexport default Search;","import React, { Fragment } from 'react';\n\nconst Button = ({onClickP}) => {\n    return(\n        <Fragment>\n            <input className='f5 link dim ph3 pv2 mb2 dib white bg-light-purple b--black-20 ' \n            type='submit' \n            value='send' \n            onClick={onClickP}/>\n        </Fragment>\n    )\n}\n\nexport default Button;","import React from 'react';\n\nconst Viewport = (propV) => {\n    return(\n        <div className='vh-75 bt bb bw2 overflow-x-auto'>\n            {propV.children} \n            {/* box component: use children to render*/}\n        </div>\n    )\n}\n\nexport default Viewport;","import React, {Component} from 'react';\n\nclass Boundary extends Component {\n    constructor(props){   //must use 'props'\n        super(props);\n        this.state = {\n            hasError:  false,\n        }\n    }\n\n    // if there is an error...catch it\n    componentDidCatch(error, errorInfo){\n        console.log('sth went wrong',error, errorInfo); \n        this.setState({hasError: true});\n    }\n\n    render(){\n        if (this.state.hasError === true){\n            return(\n                <h1>sth goes wrong.</h1>\n            )\n        }\n        return this.props.children\n    }\n}\n\n\nexport default Boundary;","import React from 'react';\nimport CardList from '../component/CardList.js';\nimport Search from '../component/Search.js';\nimport Button from '../component/Button.js';\nimport Viewport from '../component/Viewport.js';\nimport Boundary from '../component/Boundary.js';\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      foods: [],\n      SearchField: ''\n    }\n  }\n// listen to the changes of searchbox. \n  keyInFood = (event) => {\n    //this.setState({SearchField: event.target.value}, () => console.log('keyInFood', this.state.SearchField));\n    this.setState({SearchField: event.target.value});\n    // this.setState is async function, to console the right value, we need to use callback syntax.\n    }\n\n  // fetchçš„function, use this api: \"https://rapidapi.com/kenpi04/api/food-calorie-data-search\"\n  funFetch = () => {\n    const foodWanted = this.state.SearchField;\n    const url = 'https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=' + foodWanted;\n    fetch(url, \n      {\n      \"method\": \"GET\",\n      \"headers\": {\n                    \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n                    \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n                  }\n      }\n    )\n    .then(response => {\n      return response.json()\n    })\n    .then(result => {\n      this.setState({foods: result})\n    })\n    .catch(err => {\n      console.log(err);\n    });  \n  }\n\n// CLICK button and SEARCH(do fetch)\n  btnSearchFood = () => {\n    console.log('btnOK', this.state.SearchField);\n    this.funFetch();  \n  }\n\n// if user instead of clicking the button, presses enter => fetch the keyword\n  enterSearchFood = (event) => {\n    if(event.keyCode===13){\n      console.log('enterSearchFood', event.keyCode, this.state.SearchField);\n      this.funFetch();  \n    }\n  }\n\n// Render from the beginning, loading page with \"apple\" fetch  \n  componentDidMount(){\n    fetch(\"https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=apple\", \n          {\n\t        \"method\": \"GET\",\n\t        \"headers\": {\n\t\t                    \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n\t\t                    \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n\t                    }\n          }\n    )\n    .then(response => {\n\t    return response.json()\n    })\n    .then(result => {\n      this.setState({foods: result})\n    })\n    .catch(err => {\n    \tconsole.log(err);\n    });\n  }\n\n  render(){\n    if(this.state.foods.length === 0){\n      return(\n        <div className='tc'>\n          <h1>Calorie Search</h1>\n          <h2>Loading...</h2>\n        </div>\n      )\n    }\n    else{\n    // compare [] with keyword of searchField\n    const comparedFoods = this.state.foods.filter(food => {\n      return food.shrt_desc.toLowerCase().includes(this.state.SearchField.toLowerCase())\n    });\n\n\n    return(\n      <div className='tc'>\n        <div >\n            <h1>Calorie Search</h1>\n            <Search onChangeP={this.keyInFood} onKeyDownP={this.enterSearchFood}/>\n            <Button onClickP={this.btnSearchFood}/>\n        </div>\n          <Viewport>\n            <Boundary>\n              <CardList foodP={comparedFoods}/>\n            </Boundary>\n          </Viewport>\n      </div>\n    )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}