{"ast":null,"code":"var _jsxFileName = \"/Users/marina/GitHub/calorie/src/App.js\";\nimport React from 'react';\nimport './App.css'; //import Card from './Card.js';\n\nimport CardList from './CardList.js';\nimport Search from './Search.js';\nimport Button from './Button.js';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.searchFood = event => {\n      //this.setState({SearchField: event.target.value}, () => console.log('searchFood', this.state.SearchField));\n      this.setState({\n        SearchField: event.target.value\n      }); // this.setState is async function, to console the right value, we need to use callback syntax.\n      //console.log(this.state.SearchField)\n    };\n\n    this.btnSearchFood = () => {\n      console.log('btnOK', this.state.SearchField);\n      const foodWanted = this.state.SearchField;\n      const url = 'https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=' + foodWanted; // fetch the entered keyword:\n\n      fetch(url, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n        }\n      }).then(response => {\n        return response.json();\n      }).then(result => {\n        //console.log(result[0].energ_kcal);\n        this.setState({\n          foods: result\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.state = {\n      foods: [],\n      SearchField: ''\n    };\n  } // 1. listen to the changes of searchbox. \n  //    if an event happens, then do this function\n  // 2. in render part, the element owns a property that carry this function\n  //    when it's triggered, execute the function\n  // 3. in search part, also, the search component needs a onChange attribute\n  // 4. the Search component and the App component communicate with props => {onChangeP} \n  // 5. use value to get the value of event  \n\n\n  // if user instead of clicking the button, presses enter => fetch the keyword\n  // 在input的地方要偵測是否按下enter(13) => 不是onChange, 不是onClick, 是onKeyDown\n  enterSearchFood(event) {\n    if (event.keyCode === 13) {\n      console.log('enterSearchFood', event.keyCode);\n    }\n  } // Render from the beginning  \n\n\n  componentDidMount() {\n    fetch(\"https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=apple\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(result => {\n      //console.log(result[0].energ_kcal);\n      this.setState({\n        foods: result\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Search, {\n      onChangeP: this.searchFood,\n      onKeyDownP: this.enterSearchFood,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClickP: this.btnSearchFood,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), React.createElement(CardList, {\n      foodP: this.state.foods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/marina/GitHub/calorie/src/App.js"],"names":["React","CardList","Search","Button","App","Component","constructor","searchFood","event","setState","SearchField","target","value","btnSearchFood","console","log","state","foodWanted","url","fetch","then","response","json","result","foods","catch","err","enterSearchFood","keyCode","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n//import Card from './Card.js';\nimport CardList from './CardList.js';\nimport Search from './Search.js';\nimport Button from './Button.js';\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      foods: [],\n      SearchField: ''\n    }\n  }\n// 1. listen to the changes of searchbox. \n//    if an event happens, then do this function\n// 2. in render part, the element owns a property that carry this function\n//    when it's triggered, execute the function\n// 3. in search part, also, the search component needs a onChange attribute\n// 4. the Search component and the App component communicate with props => {onChangeP} \n// 5. use value to get the value of event  \n  searchFood = (event) => {\n    //this.setState({SearchField: event.target.value}, () => console.log('searchFood', this.state.SearchField));\n    this.setState({SearchField: event.target.value});\n    \n    // this.setState is async function, to console the right value, we need to use callback syntax.\n    //console.log(this.state.SearchField)\n  }\n// 原本是，都還沒輸入，就有所有的robots顯示，輸入關鍵字，底下會過濾\n// 我想做：原本空白，一旦輸入，按下button，底下就會顯示搜尋結果 => fetch input裡面的字串\n\n// CLICK and SEARCH\n  btnSearchFood = () => {\n    console.log('btnOK', this.state.SearchField);\n    const foodWanted = this.state.SearchField;\n    const url = 'https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=' + foodWanted;\n    // fetch the entered keyword:\n    fetch(url, \n          {\n\t        \"method\": \"GET\",\n\t        \"headers\": {\n\t\t                    \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n\t\t                    \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n\t                    }\n          }\n    )\n    .then(response => {\n\t    return response.json()\n    })\n    .then(result => {\n      //console.log(result[0].energ_kcal);\n      this.setState({foods: result})\n    })\n    .catch(err => {\n    \tconsole.log(err);\n    });    \n  }\n// if user instead of clicking the button, presses enter => fetch the keyword\n// 在input的地方要偵測是否按下enter(13) => 不是onChange, 不是onClick, 是onKeyDown\n  enterSearchFood(event){\n    if(event.keyCode===13){\n      console.log('enterSearchFood', event.keyCode);\n    }  \n  }\n\n\n// Render from the beginning  \n  componentDidMount(){\n    fetch(\"https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=apple\", \n          {\n\t        \"method\": \"GET\",\n\t        \"headers\": {\n\t\t                    \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n\t\t                    \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n\t                    }\n          }\n    )\n    .then(response => {\n\t    return response.json()\n    })\n    .then(result => {\n      //console.log(result[0].energ_kcal);\n      this.setState({foods: result})\n    })\n    .catch(err => {\n    \tconsole.log(err);\n    });\n  }\n\n  render(){\n    return(\n      <div>\n        <div className='tc'>\n            <Search onChangeP={this.searchFood} onKeyDownP={this.enterSearchFood}/>\n            <Button onClickP={this.btnSearchFood}/>\n        </div>\n          <CardList foodP={this.state.foods}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}