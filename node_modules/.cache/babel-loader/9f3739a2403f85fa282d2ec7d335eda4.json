{"ast":null,"code":"var _jsxFileName = \"/Users/marina/GitHub/calorie/src/App.js\";\nimport React from 'react'; //import './App.css';\n//import Card from './Card.js';\n\nimport CardList from './CardList.js';\nimport Search from './Search.js';\nimport Button from './Button.js';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.keyInFood = event => {\n      this.setState({\n        SearchField: event.target.value\n      }, () => console.log('searchFood', this.state.SearchField)); //this.setState({SearchField: event.target.value});\n      // this.setState is async function, to console the right value, we need to use callback syntax.\n      // also, match the keywords with [ ]\n\n      const newFoods = this.state.foods.filter(food => foods.includes(this.state.SearchField));\n      this.setState.foods = newFoods;\n    };\n\n    this.funFetch = () => {\n      const foodWanted = this.state.SearchField;\n      const url = 'https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=' + foodWanted;\n      fetch(url, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n        }\n      }).then(response => {\n        return response.json();\n      }).then(result => {\n        //console.log(result[0].energ_kcal);\n        this.setState({\n          foods: result\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.btnSearchFood = () => {\n      console.log('btnOK', this.state.SearchField);\n      this.funFetch();\n    };\n\n    this.enterSearchFood = event => {\n      //console.log('enterSearchFood', event.keyCode, this.state.SearchField);\n      if (event.keyCode === 13) {\n        console.log('enterSearchFood', event.keyCode, this.state.SearchField);\n        this.funFetch();\n      }\n    };\n\n    this.state = {\n      foods: [],\n      SearchField: ''\n    };\n  } // 1. listen to the changes of searchbox. \n  //    if an event happens, then do this function\n  // 2. in render part, the element owns a property that carry this function\n  //    when it's triggered, execute the function\n  // 3. in search part, also, the search component needs a onChange attribute\n  // 4. the Search component and the App component communicate with props => {onChangeP} \n  // 5. use value to get the value of event  \n\n\n  // Render from the beginning  \n  componentDidMount() {\n    fetch(\"https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=apple\", {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(result => {\n      //console.log(result[0].energ_kcal);\n      this.setState({\n        foods: result\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  } // 點按其中一張Card -> 進到下一個畫面 -> 輸入重量, 勾勾存檔 -> 回到主畫面\n  // 主畫面：有日期、今日攝取食物清單及熱量、加入的搜尋畫面（目前做的）、今天的熱量加總顯示\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Calorie Search\"), React.createElement(Search, {\n      onChangeP: this.keyInFood,\n      onKeyDownP: this.enterSearchFood,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClickP: this.btnSearchFood,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(CardList, {\n      foodP: this.state.foods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/marina/GitHub/calorie/src/App.js"],"names":["React","CardList","Search","Button","App","Component","constructor","keyInFood","event","setState","SearchField","target","value","console","log","state","newFoods","foods","filter","food","includes","funFetch","foodWanted","url","fetch","then","response","json","result","catch","err","btnSearchFood","enterSearchFood","keyCode","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\n//import './App.css';\n//import Card from './Card.js';\nimport CardList from './CardList.js';\nimport Search from './Search.js';\nimport Button from './Button.js';\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      foods: [],\n      SearchField: ''\n    }\n  }\n// 1. listen to the changes of searchbox. \n//    if an event happens, then do this function\n// 2. in render part, the element owns a property that carry this function\n//    when it's triggered, execute the function\n// 3. in search part, also, the search component needs a onChange attribute\n// 4. the Search component and the App component communicate with props => {onChangeP} \n// 5. use value to get the value of event  \n  keyInFood = (event) => {\n    this.setState({SearchField: event.target.value}, () => console.log('searchFood', this.state.SearchField));\n    //this.setState({SearchField: event.target.value});\n    // this.setState is async function, to console the right value, we need to use callback syntax.\n  \n    // also, match the keywords with [ ]\n    const newFoods = this.state.foods.filter(food => foods.includes(this.state.SearchField));\n    this.setState.foods = newFoods;\n  }\n\n  // fetch的function\n  funFetch = () => {\n    const foodWanted = this.state.SearchField;\n    const url = 'https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=' + foodWanted;\n    fetch(url, \n      {\n      \"method\": \"GET\",\n      \"headers\": {\n                    \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n                    \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n                  }\n      }\n    )\n    .then(response => {\n      return response.json()\n    })\n    .then(result => {\n      //console.log(result[0].energ_kcal);\n      this.setState({foods: result})\n    })\n    .catch(err => {\n      console.log(err);\n    });  \n  }\n\n//當載入頁面時，先fetch出apple的食物，\n//當使用者key入文字，要把文字跟載入的[ ]做比對，並同步render在畫面上。\n\n// CLICK button and SEARCH\n  btnSearchFood = () => {\n    console.log('btnOK', this.state.SearchField);\n    this.funFetch();  \n  }\n\n// if user instead of clicking the button, presses enter => fetch the keyword\n// 在input的地方要偵測是否按下enter(13) => 不是onChange, 不是onClick, 是onKeyDown\n  enterSearchFood = (event) => {\n    //console.log('enterSearchFood', event.keyCode, this.state.SearchField);\n    if(event.keyCode===13){\n      console.log('enterSearchFood', event.keyCode, this.state.SearchField);\n      this.funFetch();  \n    }\n  }\n\n\n// Render from the beginning  \n  componentDidMount(){\n    fetch(\"https://food-calorie-data-search.p.rapidapi.com/api/search?keyword=apple\", \n          {\n\t        \"method\": \"GET\",\n\t        \"headers\": {\n\t\t                    \"x-rapidapi-host\": \"food-calorie-data-search.p.rapidapi.com\",\n\t\t                    \"x-rapidapi-key\": \"2da75ce1cfmsh26fa14825a18dd4p16d23bjsn59e64460077f\"\n\t                    }\n          }\n    )\n    .then(response => {\n\t    return response.json()\n    })\n    .then(result => {\n      //console.log(result[0].energ_kcal);\n      this.setState({foods: result})\n    })\n    .catch(err => {\n    \tconsole.log(err);\n    });\n  }\n\n\n\n// 點按其中一張Card -> 進到下一個畫面 -> 輸入重量, 勾勾存檔 -> 回到主畫面\n// 主畫面：有日期、今日攝取食物清單及熱量、加入的搜尋畫面（目前做的）、今天的熱量加總顯示\n\n  render(){\n    return(\n      <div className='tc'>\n        <div >\n            <h1>Calorie Search</h1>\n            <Search onChangeP={this.keyInFood} onKeyDownP={this.enterSearchFood}/>\n            <Button onClickP={this.btnSearchFood}/>\n        </div>\n          <CardList foodP={this.state.foods}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}